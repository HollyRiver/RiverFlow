[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/kaggle_(3) titanic_autogluon/autogluon.html",
    "href": "posts/kaggle_(3) titanic_autogluon/autogluon.html",
    "title": "[Kaggle] - 3, titanic_autogluon",
    "section": "",
    "text": "::: {.cell _cell_guid=‘b1076dfc-b9ad-4769-8c92-a6c4dae69d19’ _uuid=‘8f2839f25d086af736a60e9eeb907d3b93b6e0e5’ execution=‘{“iopub.execute_input”:“2023-09-13T05:06:05.812807Z”,“iopub.status.busy”:“2023-09-13T05:06:05.811962Z”,“iopub.status.idle”:“2023-09-13T05:06:06.215901Z”,“shell.execute_reply”:“2023-09-13T05:06:06.214820Z”,“shell.execute_reply.started”:“2023-09-13T05:06:05.812767Z”}’}\n:::\npip install autogluon\n## tabular(테이블) 형식의 데이터를 다루는 모듈을 다운로드한다.\nfrom autogluon.tabular import TabularDataset, TabularPredictor"
  },
  {
    "objectID": "posts/kaggle_(3) titanic_autogluon/autogluon.html#분석의-절차",
    "href": "posts/kaggle_(3) titanic_autogluon/autogluon.html#분석의-절차",
    "title": "[Kaggle] - 3, titanic_autogluon",
    "section": "분석의 절차",
    "text": "분석의 절차\n\nA. 데이터\n\ntr = TabularDataset('/kaggle/input/titanic/train.csv')\ntst = TabularDataset('/kaggle/input/titanic/test.csv')\n\n## tr = pd.read_csv('/kaggle/input/titanic/train.csv')\n## tst\n\n\n\nB. Predictor 생성\n\npredictor = TabularPredictor('Survived')\n\n\n\nC. 적합(fit)\n\n학습 과정에 해당\n\n\n\nD. 예측(predict)"
  },
  {
    "objectID": "posts/kaggle_(1) titanic_1st_practice/practice.html",
    "href": "posts/kaggle_(1) titanic_1st_practice/practice.html",
    "title": "[Kaggle] - 1, titanic_1st practice",
    "section": "",
    "text": "::: {.cell _cell_guid=‘b1076dfc-b9ad-4769-8c92-a6c4dae69d19’ _uuid=‘8f2839f25d086af736a60e9eeb907d3b93b6e0e5’ execution=‘{“iopub.execute_input”:“2023-09-13T01:35:43.397236Z”,“iopub.status.busy”:“2023-09-13T01:35:43.396771Z”,“iopub.status.idle”:“2023-09-13T01:35:43.696762Z”,“shell.execute_reply”:“2023-09-13T01:35:43.694854Z”,“shell.execute_reply.started”:“2023-09-13T01:35:43.397204Z”}’}\n:::\n# 캐글에 있는 노트북을 이용하면 가상 컴퓨터에 세 개의 파일들이 직접 들어온다.\n\ntr = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\ntr.head()\ntst = pd.read_csv('/kaggle/input/titanic/test.csv')\ntst.head()"
  },
  {
    "objectID": "posts/kaggle_(1) titanic_1st_practice/practice.html#a.test---분석단계에서는-답을-모름-제출해야-알-수-있음",
    "href": "posts/kaggle_(1) titanic_1st_practice/practice.html#a.test---분석단계에서는-답을-모름-제출해야-알-수-있음",
    "title": "[Kaggle] - 1, titanic_1st practice",
    "section": "A.test - 분석단계에서는 답을 모름, 제출해야 알 수 있음",
    "text": "A.test - 분석단계에서는 답을 모름, 제출해야 알 수 있음\n-제출 결과는 리더보드에서 확인 가능"
  },
  {
    "objectID": "posts/kaggle_(1) titanic_1st_practice/practice.html#b.-train---스스로-풀어보고-채점할-수-있음",
    "href": "posts/kaggle_(1) titanic_1st_practice/practice.html#b.-train---스스로-풀어보고-채점할-수-있음",
    "title": "[Kaggle] - 1, titanic_1st practice",
    "section": "B. train - 스스로 풀어보고 채점할 수 있음",
    "text": "B. train - 스스로 풀어보고 채점할 수 있음\n\ndf = pd.DataFrame({'surv' : [1,0,1,1,0], 'sex' : ['f','m','f','m','m']})\n\n\ndf.surv\n\n\ndf.sex\n\n\n(df.sex == 'f')*1\n\n\npd.DataFrame({'real' : df.surv, 'estimate' : (df.sex == 'f')*1})\n\n\nprint((df.surv == (df.sex == 'f')*1).sum()/5)\nprint((df.surv == (df.sex == 'f')*1).mean())\n\n실제 자료의 accuracy를 구해보자.\n\n(tr.Survived == (tr.Sex == 'female')).mean()\n\n\n개념\n캐글 대회는 시험과 비슷하다. * 캐글대회를 여는 사람은 보통 (1) 모의고사문제+답 (training set) (2) 실제시험문제 (test set)를 준다. * (1)의 자료에서는 문제(X,독립변수,설명변수)와 답(y,종속변수,반응변수)이 함께 주어진다. * (2)의 자료에서는 문제(X,독립변수,설명변수)만 주어진다. * 우리는 (1)을 이용하여 문제(X,독립변수,설명변수)와 답(y,종속변수,반응변수)사이의 관계를 찾아내는 훈련을 한다. * 그리고 그 훈련이 잘 되었는지를 평가하기 위해서 (2)를 풀어보고 그 결과를 제출한다.\n- trainning set\n\ntr.iloc[0] ## 첫 번째 사람의 정보, trainning set\n\n- test set\n\ntst.iloc[0]"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "RiverFlow",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nSep 20, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nSep 17, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\n  \n\n\n\n\n[Kaggle] - 1, titanic_1st practice\n\n\n\n\n\n\n\npython\n\n\nanalisis\n\n\ntitanic\n\n\n\n\n\n\n\n\n\n\n\nSep 13, 2023\n\n\n강신성\n\n\n\n\n\n\n  \n\n\n\n\n[Kaggle] - 2, titanic_code by alexis cook\n\n\n\n\n\n\n\npython\n\n\nanalysis\n\n\ntitanic\n\n\n\n\n\n\n\n\n\n\n\nSep 13, 2023\n\n\n강신성\n\n\n\n\n\n\n  \n\n\n\n\n[Kaggle] - 3, titanic_autogluon\n\n\n\n\n\n\n\npython\n\n\nanalysis\n\n\ntitanic\n\n\n\n\n\n\n\n\n\n\n\nSep 13, 2023\n\n\n강신성\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/kaggle_(2) titanic_code by alexis cook/code-by-alexis-cook.html",
    "href": "posts/kaggle_(2) titanic_code by alexis cook/code-by-alexis-cook.html",
    "title": "[Kaggle] - 2, titanic_code by alexis cook",
    "section": "",
    "text": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\n\ntrain_data = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\ntrain_data.head()\n\n\ntest_data = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\ntest_data.head()\n\n\nwomen = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)/len(women)\n\nprint(\"% of women who survived:\", rate_women)\n\n\nmen = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)/len(men)\n\nprint(\"% of men who survived:\", rate_men)\n\n\nfrom sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\n\n\noutput\n\n-일단 해당 버전을 저장하도록 하자."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  }
]